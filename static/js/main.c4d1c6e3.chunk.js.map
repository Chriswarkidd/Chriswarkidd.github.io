{"version":3,"sources":["logo.svg","buttonDivison.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TimerButton","React","Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","look","altLook","foundLook","currentLook","_this2","secs","found","react_default","a","createElement","Fragment","className","onClick","mins","HiddenButton","_this3","_this4","TimerButtonDiv","_this5","number","color","active","buttonX","getRandomNum","buttonY","setState","_this6","interval","setInterval","tick","clearInterval","alert","min","max","Math","floor","random","_this7","buttons","i","push","j","buttonDivison_HiddenButton","key","buttonDivison_TimerButton","change","style","background","position","width","height","Boolean","window","location","hostname","match","ReactDOM","render","buttonDivison","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4d1c6e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\"\r\nimport \"./buttons.css\"\r\n\r\nclass TimerButton extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            look: this.props.look,\r\n            altLook: this.props.altLook,\r\n            foundLook: this.props.foundLook,\r\n        };\r\n\r\n        this.currentLook = this.state.look;\r\n    }\r\n    \r\n    render(){\r\n        this.currentLook = (this.props.secs % 2 === 0? this.state.look : this.state.altLook)\r\n        if (this.props.found){\r\n            this.currentLook = this.state.foundLook;\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <button \r\n                className={this.currentLook}\r\n                onClick={() => this.props.onClick()}\r\n                >\r\n                    {this.props.mins + \":\" + \r\n                    (this.props.secs < 10 ? \r\n                    (\"0\" + this.props.secs) : //else\r\n                    this.props.secs )}\r\n                </button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nclass HiddenButton extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            look: this.props.look,\r\n            altLook: this.props.altLook,\r\n            foundLook: this.props.foundLook,\r\n        };\r\n\r\n        this.currentLook = this.state.look;\r\n    }\r\n    \r\n    render(){\r\n        this.currentLook = (this.props.secs % 2 === 0? this.state.look : this.state.altLook)\r\n        if (this.props.found){\r\n            this.currentLook = this.state.foundLook;\r\n        }\r\n            return (\r\n            <React.Fragment>\r\n                <button \r\n                className={this.currentLook}\r\n                onClick={() => this.props.onClick()}\r\n                >\r\n                    {this.props.mins + \":\" + \r\n                    (this.props.secs < 10 ? \r\n                    (\"0\" + this.props.secs) : //else\r\n                    this.props.secs )}\r\n                </button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nclass TimerButtonDiv extends React.Component{\r\n    constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n        number: this.props.number,\r\n        color: \"steelblue\",\r\n        secs: 0,\r\n        mins: 0,\r\n        active: true,\r\n        found: false\r\n        };\r\n    this.buttonX = this.getRandomNum(1, this.state.number);\r\n    this.buttonY = this.getRandomNum(1, this.state.number);\r\n    }\r\n\r\n    tick(){\r\n        if (this.state.active){\r\n            this.setState(state => ({\r\n            mins: ((state.secs + 1)%60 === 0 ? state.mins + 1: state.mins),\r\n            secs: (state.secs + 1 < 60 ? state.secs + 1 : 0),\r\n            color: (state.found ? \"black\" : (state.color === \"steelblue\" ? \"teal\" : \"steelblue\")),\r\n            }));\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.interval = setInterval(() => this.tick(), 1000);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    change(){\r\n        this.setState({active: !this.state.active});\r\n    }\r\n\r\n    found(){\r\n        alert(\"You found the button\");\r\n        this.setState({found: true});\r\n    }\r\n\r\n    getRandomNum(min, max){\r\n        return Math.floor(Math.random() * (max-min) + 1 ) + min;\r\n    }\r\n\r\n    render(){\r\n        var buttons = [[]];\r\n        for (let i = 1; i < this.state.number; i++){\r\n            buttons.push([]);\r\n            buttons.push(<div></div>);\r\n            for (let j = 0; j < this.state.number; j++) {\r\n                if(j === this.buttonX && i === this.buttonY){\r\n                    buttons.push(\r\n                        <HiddenButton \r\n                            secs={this.state.secs} \r\n                            mins={this.state.mins} \r\n                            active={this.state.active}\r\n                            found={this.state.found}\r\n                            number={j} \r\n                            onClick={() => this.found()}\r\n                            key={i+\"-\"+j}\r\n                            look=\"button1\"\r\n                            altLook=\"button2\"\r\n                            foundLook=\"foundButton\"\r\n                        />\r\n                        );\r\n                }\r\n                else if (i % 2 === 0){\r\n                    if (j % 2 === 0){\r\n                        buttons.push(\r\n                        <TimerButton \r\n                            secs={this.state.secs} \r\n                            mins={this.state.mins} \r\n                            active={this.state.active}\r\n                            found={this.state.found}\r\n                            number={j} \r\n                            onClick={() => this.change()}\r\n                            key={i+\"-\"+j}\r\n                            look=\"button1\"\r\n                            altLook=\"button2\"\r\n                            foundLook=\"button3\"\r\n                        />\r\n                        );\r\n                    }\r\n                    else{\r\n                        buttons.push(\r\n                        <TimerButton \r\n                        secs={this.state.secs} \r\n                        mins={this.state.mins} \r\n                        active={this.state.active} \r\n                        found={this.state.found}\r\n                        number={j} \r\n                        onClick={() => this.change()}\r\n                        key={i+\"-\"+j}\r\n                        look=\"button2\"\r\n                        altLook=\"button1\"\r\n                        foundLook=\"button4\"\r\n                    />\r\n                        );\r\n                    }\r\n                }\r\n                else{\r\n                    if (j % 2 === 0){\r\n                        buttons.push(\r\n                        <TimerButton \r\n                            secs={this.state.secs} \r\n                            mins={this.state.mins} \r\n                            active={this.state.active} \r\n                            found={this.state.found}\r\n                            number={j} \r\n                            onClick={() => this.change()}\r\n                            key={i+\"-\"+j}\r\n                            look=\"button2\"\r\n                            altLook=\"button1\"\r\n                            foundLook=\"button4\"\r\n                        />\r\n                        );\r\n                    }\r\n                    else{\r\n                        buttons.push(\r\n                        <TimerButton \r\n                        secs={this.state.secs} \r\n                        mins={this.state.mins} \r\n                        active={this.state.active} \r\n                        found={this.state.found}\r\n                        number={j} \r\n                        onClick={() => this.change()}\r\n                        key={i+\"-\"+j}\r\n                        look=\"button1\"\r\n                        altLook=\"button2\"\r\n                        foundLook=\"button3\"\r\n                    />\r\n                    );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return(\r\n            <div style={{background: this.state.color, position: \"fixed\", width: \"100%\", height: \"100%\"}}>\r\n                {buttons}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TimerButtonDiv;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {message: this.props.message};\n  }\n\n  click = () => {\n    alert(this.state.message);\n  }\n\n  render(){\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <button onClick={()=>this.click()}> \n          press me\n        </button>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport TimerButtonDiv from './buttonDivison';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TimerButtonDiv number=\"40\" />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}